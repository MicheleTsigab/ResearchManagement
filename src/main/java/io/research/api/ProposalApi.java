/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.33).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.research.api;

import io.research.model.Committee;
import io.research.model.Review;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-03-11T07:16:01.610Z[GMT]")
@Validated
public interface ProposalApi {

    @Operation(summary = "Approve or disapprove budge.", description = "Milestone has budget and each budget must be approved or disapprove if they are requested.", tags={ "proposal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation."),
        
        @ApiResponse(responseCode = "404", description = "either the review or the proposal not found") })
    @RequestMapping(value = "/proposal/{pid}/milestone/{mid}",
        method = RequestMethod.PATCH)
    ResponseEntity<Void> approveMilestone(@Parameter(in = ParameterIn.PATH, description = "the id of the proposal", required=true, schema=@Schema()) @PathVariable("pid") Integer pid, @Parameter(in = ParameterIn.PATH, description = "the milestone id", required=true, schema=@Schema()) @PathVariable("mid") Integer mid, @NotNull @Parameter(in = ParameterIn.QUERY, description = "approve or disapprove" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "approved", required = true) Boolean approved);


    @Operation(summary = "Delete the member form the committee.", description = "", tags={ "proposal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation."),
        
        @ApiResponse(responseCode = "404", description = "either the review or the proposal not found") })
    @RequestMapping(value = "/proposal/{pid}/committee/{cid}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCommittee(@Parameter(in = ParameterIn.PATH, description = "the id of the proposal", required=true, schema=@Schema()) @PathVariable("pid") Integer pid, @Parameter(in = ParameterIn.PATH, description = "the committee", required=true, schema=@Schema()) @PathVariable("cid") Integer cid);


    @Operation(summary = "Send proposal for each committee.", description = "The Committee assigned for the proposal will get the proposal.", tags={ "proposal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation."),
        
        @ApiResponse(responseCode = "400", description = "committee not assigned."),
        
        @ApiResponse(responseCode = "404", description = "the proposal is not found") })
    @RequestMapping(value = "/proposal/{id}/evaluate",
        method = RequestMethod.PATCH)
    ResponseEntity<Void> evaluateProposal(@Parameter(in = ParameterIn.PATH, description = "the id of the proposal to accept or reject", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Return list of reviews.", description = "", tags={ "proposal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Review.class)))),
        
        @ApiResponse(responseCode = "404", description = "Invalid id.") })
    @RequestMapping(value = "/proposal/{id}/reviews",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Review>> getAllReview(@Parameter(in = ParameterIn.PATH, description = "id of the proposal", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Return all member of the committee.", description = "", tags={ "proposal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Committee.class)))),
        
        @ApiResponse(responseCode = "404", description = "proposal not found") })
    @RequestMapping(value = "/proposal/{id}/committee",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Committee>> getComittee(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "role", required = true) String role);


    @Operation(summary = "Approve or Disapprove review.", description = "unless the review is approved by the CoE or RD it will not be seen by the author.", tags={ "proposal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation."),
        
        @ApiResponse(responseCode = "404", description = "either the review or the proposal not found") })
    @RequestMapping(value = "/proposal/{pid}/review/{rid}",
        method = RequestMethod.PATCH)
    ResponseEntity<Void> getReviewOfTheProposal(@Parameter(in = ParameterIn.PATH, description = "the id of the proposal", required=true, schema=@Schema()) @PathVariable("pid") Integer pid, @Parameter(in = ParameterIn.PATH, description = "the review id to be approved or disapproved", required=true, schema=@Schema()) @PathVariable("rid") Integer rid, @NotNull @Parameter(in = ParameterIn.QUERY, description = "approve or disapprove" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "approved", required = true) Boolean approved);


    @Operation(summary = "Accept or Reject Proposal.", description = "Proposal can be accepted or reject if the are in evaluation stage.", tags={ "proposal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation."),
        
        @ApiResponse(responseCode = "404", description = "the proposal is not found or query not specfied") })
    @RequestMapping(value = "/proposal/evaluated/{id}",
        method = RequestMethod.PATCH)
    ResponseEntity<Void> proposalAccepte(@Parameter(in = ParameterIn.PATH, description = "the id of the proposal to accept or reject", required=true, schema=@Schema()) @PathVariable("id") Integer id, @NotNull @Parameter(in = ParameterIn.QUERY, description = "accept or reject" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "accepted", required = true) Boolean accepted);


    @Operation(summary = "Add committee", description = "", tags={ "proposal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation"),
        
        @ApiResponse(responseCode = "400", description = "proposal not found") })
    @RequestMapping(value = "/proposal/{id}/committee",
        method = RequestMethod.POST)
    ResponseEntity<Void> proposalIdCommitteePost(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id, @NotNull @Parameter(in = ParameterIn.QUERY, description = "email of the user to add to the committee" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "email", required = true) String email);

}

