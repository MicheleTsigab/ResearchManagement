/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.33).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.InlineResponse200;
import io.swagger.model.Milestone;
import io.swagger.model.Paper;
import io.swagger.model.PidReviewsBody1;
import io.swagger.model.Point;
import io.swagger.model.Proposal;
import io.swagger.model.ProposalCall;
import io.swagger.model.RefreshToken;
import org.springframework.core.io.Resource;
import io.swagger.model.Reviews;
import io.swagger.model.SignInReq;
import io.swagger.model.SignedInUser;
import io.swagger.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-03-11T07:16:01.610Z[GMT]")
@Validated
public interface UserApi {

    @Operation(summary = "Add milestone to the paper.", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation."),
        
        @ApiResponse(responseCode = "404", description = "call not found") })
    @RequestMapping(value = "/user/{uid}/paper/{pid}/milestone",
        consumes = { "*/*" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addMilestone(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("uid") Integer uid, @Parameter(in = ParameterIn.PATH, description = "the paper id.", required=true, schema=@Schema()) @PathVariable("pid") Integer pid, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody List<Milestone> body);


    @Operation(summary = "Add another version of the paper.", description = "Author can add another version of the paper based on the review and comment sent to him/her.", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation"),
        
        @ApiResponse(responseCode = "400", description = "proposal or paper not found") })
    @RequestMapping(value = "/user/{uid}/paper/{pid}",
        consumes = { "multipart/form-data" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> addPaper(@Parameter(in = ParameterIn.PATH, description = "the user id", required=true, schema=@Schema()) @PathVariable("uid") Integer uid, @Parameter(in = ParameterIn.PATH, description = "the paper id", required=true, schema=@Schema()) @PathVariable("pid") Integer pid, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true,schema=@Schema()) @RequestParam(value="title", required=true)  String title, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true,schema=@Schema()) @RequestParam(value="abstract", required=true)  String _abstract, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true,schema=@Schema()) @RequestParam(value="file", required=true)  List<Resource> file);


    @Operation(summary = "Give the total point of the paper.", description = "User give point based on the evaluation criteria.", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation."),
        
        @ApiResponse(responseCode = "404", description = "either the review or the proposal not found") })
    @RequestMapping(value = "/user/{uid}/review/{pid}/points",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addPoint(@Parameter(in = ParameterIn.PATH, description = "the id of the user", required=true, schema=@Schema()) @PathVariable("uid") Integer uid, @Parameter(in = ParameterIn.PATH, description = "the paper id", required=true, schema=@Schema()) @PathVariable("pid") Integer pid, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody List<Point> body);


    @Operation(summary = "Attach file for the review.", description = "File can be attached for the review.", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation."),
        
        @ApiResponse(responseCode = "404", description = "either the review or the proposal not found") })
    @RequestMapping(value = "/user/{uid}/review/{pid}/reviews",
        consumes = { "multipart/form-data" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> addReviewFile(@Parameter(in = ParameterIn.PATH, description = "the id of the user", required=true, schema=@Schema()) @PathVariable("uid") Integer uid, @Parameter(in = ParameterIn.PATH, description = "the paper id", required=true, schema=@Schema()) @PathVariable("pid") Integer pid, @Parameter(description = "file detail") @Valid @RequestPart("file") MultipartFile file);


    @Operation(summary = "Add a review to the paper.", description = "Papers may be assigned to the user for review. And the author can submitte his review.", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation."),
        
        @ApiResponse(responseCode = "404", description = "either the review or the proposal not found") })
    @RequestMapping(value = "/user/{uid}/review/{pid}/reviews",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addReviewtoPaper(@Parameter(in = ParameterIn.PATH, description = "the id of the user", required=true, schema=@Schema()) @PathVariable("uid") Integer uid, @Parameter(in = ParameterIn.PATH, description = "the paper id", required=true, schema=@Schema()) @PathVariable("pid") Integer pid, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody List<PidReviewsBody1> body);


    @Operation(summary = "Submitte Application.", description = "Submitte application for a specfic call.", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation") })
    @RequestMapping(value = "/user/{uid}/calls/{cid}",
        consumes = { "multipart/form-data" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> applyForApplication(@Parameter(in = ParameterIn.PATH, description = "call id.", required=true, schema=@Schema()) @PathVariable("cid") Integer cid, @Parameter(in = ParameterIn.PATH, description = "user id.", required=true, schema=@Schema()) @PathVariable("uid") Integer uid, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true,schema=@Schema()) @RequestParam(value="title", required=true)  String title, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true,schema=@Schema()) @RequestParam(value="abstract", required=true)  String _abstract, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true,schema=@Schema()) @RequestParam(value="file", required=true)  List<Resource> file);


    @Operation(summary = "Return List of Call.", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProposalCall.class)))) })
    @RequestMapping(value = "/user/calls",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ProposalCall>> callList();


    @Operation(summary = "Provides new JWT based on valid refresh token.", description = "Provides new JWT based on valid refresh token.", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "For successful operation.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SignedInUser.class))) })
    @RequestMapping(value = "/user/auth/token/refresh",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SignedInUser> getAccessToken(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody RefreshToken body);


    @Operation(summary = "Return list of review given to the paper.", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Reviews.class)))),
        
        @ApiResponse(responseCode = "404", description = "Paper or user not found") })
    @RequestMapping(value = "/user/{uid}/paper/{pid}/reviews",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Reviews>> getAllTheReview(@Parameter(in = ParameterIn.PATH, description = "the id of the user", required=true, schema=@Schema()) @PathVariable("uid") Integer uid, @Parameter(in = ParameterIn.PATH, description = "the paper id", required=true, schema=@Schema()) @PathVariable("pid") Integer pid);


    @Operation(summary = "Return list of file that are submitted as a review.", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "404", description = "Paper or user not found") })
    @RequestMapping(value = "/user/{uid}/paper/{pid}/reviews/files",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> getAllTheReviewFile(@Parameter(in = ParameterIn.PATH, description = "the id of the user", required=true, schema=@Schema()) @PathVariable("uid") Integer uid, @Parameter(in = ParameterIn.PATH, description = "the paper id", required=true, schema=@Schema()) @PathVariable("pid") Integer pid);


    @Operation(summary = "Get the evaluation criteria.", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Point.class)))),
        
        @ApiResponse(responseCode = "404", description = "either the review or the proposal not found") })
    @RequestMapping(value = "/user/{uid}/review/{pid}/points",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Point>> getEvaluationCriteria(@Parameter(in = ParameterIn.PATH, description = "the id of the user", required=true, schema=@Schema()) @PathVariable("uid") Integer uid, @Parameter(in = ParameterIn.PATH, description = "the paper id", required=true, schema=@Schema()) @PathVariable("pid") Integer pid);


    @Operation(summary = "Return all papers submitted by one user.", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Proposal.class)))),
        
        @ApiResponse(responseCode = "404", description = "invalid id") })
    @RequestMapping(value = "/user/{id}/paper",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Proposal>> getSubmittedPaper(@Parameter(in = ParameterIn.PATH, description = "id of the user", required=true, schema=@Schema()) @PathVariable("id") Integer id, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Define whether the paper is accepted, rejected or watting for approval form the RD or CoE" ,required=true,schema=@Schema(allowableValues={ "Accepted", "Rejected", "Watting" }
)) @Valid @RequestParam(value = "status", required = true) String status);


    @Operation(summary = "Return list of papers assigned to the user for evaluation.", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Paper.class)))),
        
        @ApiResponse(responseCode = "404", description = "invalid id") })
    @RequestMapping(value = "/user/{id}/reviews",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Paper>> getSubmittedPaperforReview(@Parameter(in = ParameterIn.PATH, description = "id of the user", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Budget request for one milestone.", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation."),
        
        @ApiResponse(responseCode = "404", description = "paper or milestone not found") })
    @RequestMapping(value = "/user/{uid}/paper/{pid}/miestone/{mid}/request",
        method = RequestMethod.GET)
    ResponseEntity<Void> requestBudget(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("uid") Integer uid, @Parameter(in = ParameterIn.PATH, description = "the paper id.", required=true, schema=@Schema()) @PathVariable("pid") Integer pid, @Parameter(in = ParameterIn.PATH, description = "milestone id.", required=true, schema=@Schema()) @PathVariable("mid") Integer mid);


    @Operation(summary = "Signin the customer (user)", description = "Signin the customer (user) that generates       the JWT (access token) and refresh token,       which can be used for accessing APIs.", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "For user sign-in. Once successful,user      receives the access and refresh token.", content = @Content(mediaType = "application/xml", schema = @Schema(implementation = SignedInUser.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid username/password supplied") })
    @RequestMapping(value = "/user/auth/token",
        produces = { "application/xml" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SignedInUser> signIn(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody SignInReq body);


    @Operation(summary = "Signouts the customer (user)", description = "Signouts the customer (user). It removes the refresh token from DB. Last issued JWT should be removed from client end that if not removed last for given expiration time.", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "202", description = "Accepts the request for logout.") })
    @RequestMapping(value = "/user/auth/token",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> signOut(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "refreshToken", required = true) RefreshToken refreshToken);


    @Operation(summary = "Create new user.", description = "This feature is optional, since all the staff will be already registed.", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "For successful user creation.", content = @Content(mediaType = "application/xml", schema = @Schema(implementation = SignedInUser.class))) })
    @RequestMapping(value = "/user/signup",
        produces = { "application/xml" }, 
        consumes = { "multipart/form-data" }, 
        method = RequestMethod.POST)
    ResponseEntity<SignedInUser> signUp(@Parameter(in = ParameterIn.DEFAULT, description = "",schema=@Schema()) @RequestParam(value="name", required=false)  String name, @Parameter(in = ParameterIn.DEFAULT, description = "",schema=@Schema()) @RequestParam(value="email", required=false)  String email, @Parameter(in = ParameterIn.DEFAULT, description = "",schema=@Schema()) @RequestParam(value="role", required=false)  String role, @Parameter(in = ParameterIn.DEFAULT, description = "",schema=@Schema()) @RequestParam(value="password", required=false)  String password, @Parameter(description = "file detail") @Valid @RequestPart("file") MultipartFile picture);


    @Operation(summary = "Return Information of Specific user.", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "user not found") })
    @RequestMapping(value = "/user/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> userIdGet(@Parameter(in = ParameterIn.PATH, description = "id of the user to return.", required=true, schema=@Schema()) @PathVariable("id") Long id);


    @Operation(summary = "Change Password", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation"),
        
        @ApiResponse(responseCode = "400", description = "proposal not found") })
    @RequestMapping(value = "/user/{id}",
        method = RequestMethod.PATCH)
    ResponseEntity<Void> userIdPatch(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id, @NotNull @Parameter(in = ParameterIn.QUERY, description = "the new password" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "password", required = true) String password);


    @Operation(summary = "Upload Picture.", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation"),
        
        @ApiResponse(responseCode = "400", description = "proposal not found") })
    @RequestMapping(value = "/user/{id}",
        consumes = { "multipart/form-data" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> userIdPut(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(description = "file detail") @Valid @RequestPart("file") MultipartFile file);


    @Operation(summary = "Return List of milestone.", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Milestone.class)))),
        
        @ApiResponse(responseCode = "404", description = "call not found") })
    @RequestMapping(value = "/user/{uid}/paper/{pid}/milestone",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Milestone>> userMilestone(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("uid") Integer uid, @Parameter(in = ParameterIn.PATH, description = "the paper id.", required=true, schema=@Schema()) @PathVariable("pid") Integer pid);

}

