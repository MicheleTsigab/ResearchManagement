/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.33).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Milestone;
import io.swagger.model.Version;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-03-11T07:16:01.610Z[GMT]")
@Validated
public interface PoposalApi {

    @Operation(summary = "Approve or Disaprove Proposal.", description = "Proposals can be disaprove or approved if they are in sumission stage means they are new.", tags={ "proposal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Succussful Operation"),
        
        @ApiResponse(responseCode = "404", description = "either proposa id or approved query not found") })
    @RequestMapping(value = "/poposal/submitted/{id}",
        method = RequestMethod.PATCH)
    ResponseEntity<Void> approveProposal(@NotNull @Parameter(in = ParameterIn.QUERY, description = "approve/disaprove proposal to the evaluation stage." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "accepted", required = true) Boolean accepted, @Parameter(in = ParameterIn.PATH, description = "the id of the proposal to approve or disaprove", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Return all Milestone of the proposal.", description = "", tags={ "proposal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Milestone.class)))),
        
        @ApiResponse(responseCode = "404", description = "proposal not found.") })
    @RequestMapping(value = "/poposal/{id}/milestones",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Milestone>> getMilestone(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Return all version of the proposal.", description = "Each proposal will be returned with thier evaluation stage and point", tags={ "proposal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Operation.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Version.class)))),
        
        @ApiResponse(responseCode = "404", description = "invalid id") })
    @RequestMapping(value = "/poposal/{id}/versions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Version>> getVersionOfProposal(@Parameter(in = ParameterIn.PATH, description = "id of the proposal", required=true, schema=@Schema()) @PathVariable("id") Integer id);

}

